import 'dart:async';
import 'dart:convert';
import 'dart:ui';


import 'Helper/SimBtn.dart';

import 'package:eshop/CheckOut.dart';
import 'package:eshop/Helper/Constant.dart';

import 'package:eshop/Helper/Session.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:http/http.dart';

import 'Helper/AppBtn.dart';
import 'Helper/Color.dart';
import 'Helper/String.dart';
import 'Model/Section_Model.dart';
import 'Product_Detail.dart';
import 'Home.dart';

class Cart extends StatefulWidget {
  final Function updateHome, updateParent;

  Cart(this.updateHome, this.updateParent);

  @override
  State<StatefulWidget> createState() => StateCart();
}

List<Section_Model> cartList = [];
double totalPrice = 0, oriPrice = 0, delCharge = 0, taxAmt = 0, taxPer = 0;

class StateCart extends State<Cart> with TickerProviderStateMixin {
  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();
  bool _isProgress = false, _isLoading = true;
  HomePage home;
  Animation buttonSqueezeanimation;
  AnimationController buttonController;
  bool _isNetworkAvail = true;
  bool _value = false;
  List<TextEditingController> _controller = [];
  var items;
  final GlobalKey<RefreshIndicatorState> _refreshIndicatorKey =
  new GlobalKey<RefreshIndicatorState>();
  List<Section_Model> saveLaterList = [];

  @override
  void initState() {
    super.initState();
    totalPrice = 0;
    oriPrice = 0;
    taxAmt = 0;
    taxPer = 0;
    delCharge = 0;
    cartList.clear();
    _getCart("0");
    _getSaveLater("1");
    home = new HomePage(widget.updateHome);
    buttonController = new AnimationController(
        duration: new Duration(milliseconds: 2000), vsync: this);

    buttonSqueezeanimation = new Tween(
      begin: deviceWidth * 0.7,
      end: 50.0,
    ).animate(new CurvedAnimation(
      parent: buttonController,
      curve: new Interval(
        0.0,
        0.150,
      ),
    ));
  }


  Future<Null> _refresh() {
    setState(() {
      _isLoading = true;
    });
    totalPrice = 0;
    oriPrice = 0;
    taxAmt = 0;
    taxPer = 0;
    delCharge = 0;
    cartList.clear();
    _getCart("0");
    return _getSaveLater("1");


  }

  @override
  void dispose() {
    buttonController.dispose();
    super.dispose();
  }

  Future<Null> _playAnimation() async {
    try {
      await buttonController.forward();
    } on TickerCanceled {}
  }

  Widget noInternet(BuildContext context) {
    return Center(
      child: SingleChildScrollView(
        child: Column(mainAxisSize: MainAxisSize.min, children: [
          noIntImage(),
          noIntText(context),
          noIntDec(context),
          AppBtn(
            title: TRY_AGAIN_INT_LBL,
            btnAnim: buttonSqueezeanimation,
            btnCntrl: buttonController,
            onBtnSelected: () async {
              _playAnimation();

              Future.delayed(Duration(seconds: 2)).then((_) async {
                _isNetworkAvail = await isNetworkAvailable();
                if (_isNetworkAvail) {
                  Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(
                          builder: (BuildContext context) => super.widget));
                } else {
                  await buttonController.reverse();
                  setState(() {});
                }
              });
            },
          )
        ]),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {

    deviceHeight = MediaQuery.of(context).size.height;
    deviceWidth = MediaQuery.of(context).size.width;
    return Scaffold(
        key: _scaffoldKey,
        backgroundColor: lightWhite,
        appBar: getAppBar(CART, context),
        body: _isNetworkAvail
            ? Stack(
                children: <Widget>[
                  _showContent(),
                  showCircularProgress(_isProgress, primary),
                ],
              )
            : noInternet(context));
  }

  Future<bool> getSection() async {
    try {
      var parameter = {PRODUCT_LIMIT: "4", PRODUCT_OFFSET: "0"};

      if (CUR_USERID != null) parameter[USER_ID] = CUR_USERID;
      Response response =
          await post(getSectionApi, body: parameter, headers: headers)
              .timeout(Duration(seconds: timeOut));

      var getdata = json.decode(response.body);

      print('section get***');
      print('response***sec**$headers***${response.body.toString()}');
      bool error = getdata["error"];
      String msg = getdata["message"];
      if (!error) {
        var data = getdata["data"];
        sectionList.clear();
        sectionList = (data as List)
            .map((data) => new Section_Model.fromJson(data))
            .toList();
      } else {
        setSnackbar(msg);
      }
    } catch (Exception) {}
    Navigator.of(context).pop(true);
    return true;
  }

  Widget listItem(int index) {

    int selectedPos = 0;
    for (int i = 0;
        i < cartList[index].productList[0].prVarientList.length;
        i++) {
      if (cartList[index].varientId ==
          cartList[index].productList[0].prVarientList[i].id) selectedPos = i;
    }

    double price = double.parse(
        cartList[index].productList[0].prVarientList[selectedPos].disPrice);
    if (price == 0)
      price = double.parse(
          cartList[index].productList[0].prVarientList[selectedPos].price);

    cartList[index].perItemPrice = price.toString();
    cartList[index].perItemTotal =
        (price * double.parse(cartList[index].qty)).toString();

      _controller[index].text = cartList[index].qty;


    items = new List<String>.generate(
        int.parse(cartList[index].productList[0].totalAllow), (i) => (i+1).toString());



    return Card(
      elevation: 0.1,
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child:
            /*     GestureDetector(
          child: */
            Row(
          children: <Widget>[
            Hero(
                tag: "$index${cartList[index].productList[0].id}",
                child: ClipRRect(
                    borderRadius: BorderRadius.circular(7.0),
                    child: FadeInImage(
                      image:NetworkImage(cartList[index].productList[0].image),
                      height: 60.0,
                      width: 60.0,
                     // errorWidget:(context, url,e) => placeHolder(60) ,
                      placeholder:placeHolder(60),
                    ))),
            Expanded(
              child: Padding(
                padding: const EdgeInsets.only(left: 8.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: <Widget>[
                    Row(
                      children: [
                        Expanded(
                          child: Padding(
                            padding: const EdgeInsets.only(top: 5.0),
                            child: Text(
                              cartList[index].productList[0].name,
                              style: Theme.of(context)
                                  .textTheme
                                  .subtitle2
                                  .copyWith(color: lightBlack),
                              maxLines: 2,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                        ),
                        GestureDetector(
                          child: Padding(
                            padding: const EdgeInsets.only(
                                left: 8.0, right: 8, bottom: 8),
                            child: Icon(
                              Icons.close,
                              size: 13,
                              color: fontColor,
                            ),
                          ),
                          onTap: () {
                            removeFromCart(index, true);
                          },
                        )
                      ],
                    ),
                    /*  Padding(
                        padding: const EdgeInsets.symmetric(vertical: 5.0),
                        child: Row(
                          children: [
                            Icon(
                              Icons.star,
                              color: Colors.yellow,
                              size: 12,
                            ),
                            Text(
                              " " + cartList[index].productList[0].rating,
                              style: Theme.of(context).textTheme.overline,
                            ),
                            Text(
                              " (" +
                                  cartList[index].productList[0].noOfRating +
                                  ")",
                              style: Theme.of(context).textTheme.overline,
                            )
                          ],
                        ),
                      ),*/
                    Row(
                      children: <Widget>[
                        Text(
                          int.parse(cartList[index]
                                      .productList[0]
                                      .prVarientList[selectedPos]
                                      .disPrice) !=
                                  0
                              ? CUR_CURRENCY +
                                  "" +
                                  cartList[index]
                                      .productList[0]
                                      .prVarientList[selectedPos]
                                      .price
                              : "",
                          style: Theme.of(context).textTheme.overline.copyWith(
                              decoration: TextDecoration.lineThrough,
                              letterSpacing: 0.7),
                        ),
                        Text(
                          " " + CUR_CURRENCY + " " + price.toString(),
                          style: TextStyle(
                              color: fontColor, fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                    cartList[index].productList[0].availability == "1" ||
                            cartList[index].productList[0].stockType == "null"
                        ? Row(
                            children: <Widget>[
                              Row(
                                children: <Widget>[
                                  GestureDetector(
                                    child: Container(
                                      padding: EdgeInsets.all(2),
                                      margin: EdgeInsets.only(
                                          right: 8, top: 8, bottom: 8),
                                      child: Icon(
                                        Icons.remove,
                                        size: 12,
                                        color: fontColor,
                                      ),
                                      decoration: BoxDecoration(
                                          color: lightWhite,
                                          borderRadius: BorderRadius.all(
                                              Radius.circular(3))),
                                    ),
                                    onTap: () {
                                      removeFromCart(index, false);
                                    },
                                  ),
                                  /*        Text(
                                      cartList[index].qty,
                                      style: Theme.of(context)
                                          .textTheme
                                          .caption
                                          .copyWith(color: fontColor),*/
                                  Container(
                                    width: 40,
                                    height: 20,
                                    child: Stack(
                                      children: [
                                        TextField(
                                          textAlign: TextAlign.center,
                                          readOnly: true,
                                          style: TextStyle(
                                            fontSize: 10,
                                          ),
                                          controller: _controller[index],
                                          decoration: InputDecoration(
                                            focusedBorder: OutlineInputBorder(
                                              borderSide: BorderSide(
                                                  color: fontColor, width: 0.5),
                                              borderRadius:
                                                  BorderRadius.circular(5.0),
                                            ),
                                            enabledBorder: OutlineInputBorder(
                                              borderSide: BorderSide(
                                                  color: fontColor, width: 0.5),
                                              borderRadius:
                                                  BorderRadius.circular(5.0),
                                            ),
                                          ),
                                        ),
                                        PopupMenuButton<String>(
                                          tooltip: '',
                                          icon: const Icon(
                                            Icons.arrow_drop_down,
                                            size: 1,
                                          ),
                                          onSelected: (String value) {
                                            print(
                                                'value********$value====${_controller[index].text}');

                                            addToCart(index, value);
                                          },
                                          itemBuilder: (BuildContext context) {
                                            return items
                                                .map<PopupMenuItem<String>>(
                                                    (String value) {
                                              return new PopupMenuItem(
                                                  child: new Text(value),
                                                  value: value);
                                            }).toList();
                                          },
                                        ),
                                      ],
                                    ),
                                  ), // ),

                                  GestureDetector(
                                    child: Container(
                                      padding: EdgeInsets.all(2),
                                      margin: EdgeInsets.all(8),
                                      child: Icon(
                                        Icons.add,
                                        size: 12,
                                        color: fontColor,
                                      ),
                                      decoration: BoxDecoration(
                                          color: lightWhite,
                                          borderRadius: BorderRadius.all(
                                              Radius.circular(3))),
                                    ),
                                    onTap: () {
                                      addToCart(
                                          index,
                                          (int.parse(cartList[index].qty) + 1)
                                              .toString());
                                    },
                                  )
                                ],
                              ),
                              GestureDetector(
                                child: Container(
                                  margin: EdgeInsets.only(left: 8),
                                  padding: EdgeInsets.symmetric(
                                      horizontal: 10, vertical: 2),
                                  decoration: BoxDecoration(
                                      color: lightWhite,
                                      borderRadius: new BorderRadius.all(
                                          const Radius.circular(4.0))),
                                  child: Text(
                                    SAVEFORLATER_BTN,
                                    style: TextStyle(
                                        color: fontColor, fontSize: 10),
                                  ),
                                ),
                                onTap: () {
                                  saveForLater(
                                      cartList[index].varientId,
                                      "1",
                                      cartList[index].qty,
                                      double.parse(
                                          cartList[index].perItemTotal),
                                      cartList[index]);
                                },
                              ),
                              /* Text(
                                    " " +
                                        CUR_CURRENCY +
                                        " " +
                                        cartList[index].perItemTotal.toString(),
                                    style: Theme.of(context).textTheme.headline6)*/
                            ],
                          )
                        : Container(),
                  ],
                ),
              ),
            )
          ],
        ),
/*          onTap: () async {
*/ /*            Product model = cartList[index].productList[0];
            await Navigator.push(
              context,
              PageRouteBuilder(
                  transitionDuration: Duration(seconds: 1),
                  pageBuilder: (_, __, ___) => ProductDetail(
                        model: model,
                        updateParent: updateCart,
                        updateHome: widget.updateHome,
                        secPos: 0,
                        index: index,
                        list: true,
                        //  title: productList[index].name,
                      )),
            );

            totalPrice = 0;
            oriPrice = 0;
            taxAmt = 0;
            taxPer = 0;
            delCharge = 0;
            cartList.clear();
            _getCart();*/ /*
          },*/
        //),
      ),
    );
  }

  Widget saveLaterItem(int index) {

    int selectedPos = 0;
    for (int i = 0;
        i < saveLaterList[index].productList[0].prVarientList.length;
        i++) {
      if (saveLaterList[index].varientId ==
          saveLaterList[index].productList[0].prVarientList[i].id)
        selectedPos = i;
    }

    double price = double.parse(saveLaterList[index]
        .productList[0]
        .prVarientList[selectedPos]
        .disPrice);
    if (price == 0)
      price = double.parse(
          saveLaterList[index].productList[0].prVarientList[selectedPos].price);

    saveLaterList[index].perItemPrice = price.toString();
    saveLaterList[index].perItemTotal =
        (price * double.parse(saveLaterList[index].qty)).toString();

    print("price****$oriPrice***$price---$index");

    return Card(
      elevation: 0.1,
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child:
            /*     GestureDetector(
          child: */
            Row(
          children: <Widget>[
            Hero(
                tag: "$index${saveLaterList[index].productList[0].id}",
                child: ClipRRect(
                    borderRadius: BorderRadius.circular(7.0),
                    child: FadeInImage(
                      image: NetworkImage(saveLaterList[index].productList[0].image),
                      height: 60.0,
                      width: 60.0,

                      //errorWidget:(context, url,e)